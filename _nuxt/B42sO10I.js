import{_ as G,a as z}from"./Dd3j-nKy.js";import{f as F,z as Y,g as Q,r as s,s as X,h as R,i as Z,j as ee,o as C,w as I,a as S,b as m,k as te,d as w,c as oe,l as ne,p as k,m as y,q as se,n as ae,_ as re}from"./DBBV_C1k.js";import{g as le,v as ie,w as U,m as ce}from"./k4N5AtOj.js";import{C as de,a as q,g as N,b as ue}from"./C0c8pc9Q.js";import"./XCVsyzMu.js";import{c as pe,b as ye}from"./m44icXg6.js";import"./qLApFlfE.js";const me={class:"flex items-center gap-0"},ge={key:0},x="Testnet",fe=F({__name:"create-identity",setup(ve){const r=Y("showLoader"),V=Q();s({}),s(""),s(""),s(""),s(0),s(""),s({}),s(""),s(null);const l=s(""),g=s(!1),j=s(!1),v=s([]),h=s(0);s({});const _={walletProxyBaseUrl:"https://wallet-proxy.testnet.concordium.com",grpcPort:2e4,grpcUrl:"https://grpc.testnet.concordium.com"},b=_.grpcUrl,T=_.grpcPort,A=_.walletProxyBaseUrl;console.log({nodeAddress:b});const B=new de(b,T),O=()=>{localStorage.clear()};X(async()=>{r.value=!0;const t=await M();r.value=!1,localStorage.setItem("ip-info",JSON.stringify(t)),v.value=t});const L=async()=>{O();const t=le(U,256);localStorage.setItem("seed-phrase",t),l.value=t,g.value=!0},P=async()=>{const t=l.value,e=ie(t,U);localStorage.setItem("seed-phrase",t),console.log(e),e?(console.log("Valid seed phrase"),g.value=!0):(console.log("Invalid seed phrase"),g.value=!1)},M=async()=>(await fetch(A+"/v1/ip_info")).json(),i=R(()=>v.value[h.value]),D=R(()=>{const t=localStorage.getItem("identity-objects");let e=[];return t?e=JSON.parse(t):e=[],e.length}),J=t=>Math.min(t-1,255),$=async(t,e)=>{try{const n={scope:"identity",response_type:"code",redirect_uri:N(),state:JSON.stringify({idObjectRequest:t})},o=new URLSearchParams(n),a=`${e}?${o.toString()}`,u=await fetch(a);if(u.redirected)return u.url;throw new Error("The identity provider did not redirect as expected.")}catch(n){return console.log(n.message),alert("An error occurred while sending the identity request. Maybe identity exists already. Try Recover Account"),null}},H=async()=>{try{r.value=!0;const t=q.fromSeedPhrase(l.value,x),e=i.value.ipInfo.ipIdentity,n=D.value,o=t.getIdCredSec(e,n).toString("hex"),a=t.getPrfKey(e,n).toString("hex"),u=await B.getCryptographicParameters(),f=t.getSignatureBlindingRandomness(e,n).toString("hex"),c={arsInfos:i.value.arsInfos,arThreshold:J(Object.keys(i.value.arsInfos).length),ipInfo:i.value.ipInfo,globalContext:u,idCredSec:o,prfKey:a,blindingRandomness:f};console.log("...........trying to create identity request");const d=pe(c),p=await $(d,i.value.metadata.issuanceStart);if(p==null){alert("An error occurred while sending the identity request. Maybe identity exists already. Try Recover Account");return}p!=null&&p.includes(N())?window.alert("An error occurred during the identity creation."):window.open(p,"_blank")}catch(t){console.log(t)}finally{r.value=!1}};Z(()=>V.fullPath,()=>{l.value=localStorage.getItem("seed-phrase")||"",g.value=l.value.length>0,g.value&&P()},{immediate:!0});const K=async t=>{r.value=!0,P();const e=E();Promise.all([e]).then(()=>{r.value=!1;const n=JSON.parse(localStorage.getItem("identity-objects")||"[]");let o;n.length>0?o="Recovery successful. You can now create account with the recovered identity.":o="No identity found to recover for IDP"+i.value.metadata.support+". Please check your seed and try again.",console.log(o),alert(o)}).catch(n=>{console.error(n),r.value=!1})};function W(t){const e=ce(t);return Array.from(e).map(n=>n.toString(16).padStart(2,"0")).join("")}const E=async()=>{j.value=!1,i.value.ipInfo.ipIdentity;const t=await ue();let e=[];q.fromSeedPhrase(l.value,x);const n=W(l.value);console.log({seedHex:n});for(let o=0;o<=21;o++){const a={ipInfo:i.value.ipInfo,globalContext:t,timestamp:Math.floor(Date.now()/1e3),seedAsHex:n,net:x,identityIndex:o};console.log({identityRequestInput:a}),console.log("...........trying to create identity recovery request for identityIndex: "+o);const u=ye(a),f=new URLSearchParams({state:JSON.stringify({idRecoveryRequest:u})}),c=`${i.value.metadata.recoveryStart}?${f.toString()}`;try{const d=await fetch(c);if(d.ok){const p=await d.json();e.push(p.value)}else console.error("Failed to recover identity:",d.statusText)}catch(d){console.error(d),console.log("continuing... identityIndex = "+o)}}localStorage.setItem("identity-objects",JSON.stringify(e,(o,a)=>typeof a=="bigint"?Number(a):a))};return(t,e)=>{const n=G,o=se,a=z,u=te,f=ae;return C(),ee(f,null,{default:I(()=>[S("div",me,[m(u,{style:{width:"100%"}},{default:I(()=>[e[3]||(e[3]=w(" IDP Seed: ")),m(n,{modelValue:y(l),"onUpdate:modelValue":e[0]||(e[0]=c=>k(l)?l.value=c:null)},null,8,["modelValue"]),m(o,{type:"success",onClick:L,disabled:y(r)},{default:I(()=>e[2]||(e[2]=[w("Generate")])),_:1,__:[2]},8,["disabled"]),e[4]||(e[4]=S("br",null,null,-1)),e[5]||(e[5]=S("br",null,null,-1)),y(v).length>0?(C(),oe("h4",ge," Select an IDP: ")):ne("",!0),m(a,{modelValue:y(h),"onUpdate:modelValue":e[1]||(e[1]=c=>k(h)?h.value=c:null),options:y(v).map((c,d)=>({label:c.ipInfo.ipDescription.name,value:d})),label:"Select Identity Provider"},null,8,["modelValue","options"]),m(o,{label:"Create Identity",onClick:H,disabled:y(r)},null,8,["disabled"]),e[6]||(e[6]=w(" / ")),m(o,{label:"Recover Identity",onClick:K,disabled:y(r)},null,8,["disabled"])]),_:1,__:[3,4,5,6]})])]),_:1})}}}),Pe=re(fe,[["__scopeId","data-v-6e5a1564"]]);export{Pe as default};
