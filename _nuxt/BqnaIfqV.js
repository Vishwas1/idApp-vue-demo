import{f,r as c,g as p,s as m,j as _,o as y,n as v}from"./DBBV_C1k.js";import{I as l}from"./BghHf8Ak.js";import{l as b}from"./C0c8pc9Q.js";import"./k4N5AtOj.js";const P=f({__name:"idp-callback",setup(h){const t=c({}),i=p(),n=c(!1),s=c(!0),u=async a=>new Promise(async(e,d)=>{await b(5e3,async()=>{try{const o=await(await fetch(a)).json();return l.Done===o.status?(e(o.token.identityObject.value),!1):l.Error===o.status?(d(o.detail),!1):!0}catch{return!0}})});return m(()=>{if(t.value=Object.fromEntries(new URLSearchParams(i.fullPath).entries()),console.log("queryParams",t.value),console.log("queryParams",t.value["/idp-callback#code_uri"]),console.log("queryParams",t.value["/idp-callback/#code_uri"]),t.value["/idp-callback#code_uri"]||t.value["/idp-callback/#code_uri"]){s.value=!0;const a=t.value["/idp-callback#code_uri"]||t.value["/idp-callback/#code_uri"];if(!a)throw new Error("No identity object URL found in the query parameters.");u(a).then(r=>{let e=localStorage.getItem("identity-objects");e?e=JSON.parse(e):e=[],e.unshift(r),localStorage.setItem("identity-objects",JSON.stringify(e)),n.value=!0,window.close(),s.value=!1}).catch(r=>{n.value=!1,s.value=!1,console.error("Error fetching identity object:",r)})}}),(a,r)=>{const e=v;return y(),_(e)}}});export{P as default};
